manova(Y~X)
dim(Y)
dim(X)
manova(Y~t(X))
X = t(X)
manova(Y~t(X))
sepl <- iris$Sepal.Length
petl <- iris$Petal.Length
# MANOVA test
res.man <- manova(cbind(Sepal.Length, Petal.Length) ~ Species, data = iris)
summary(res.man)
Species
iris$Species
manova(Y~c(X)
)
dim(Y)
dim(X)
X = t(X)
com = cbind(X, Y)
View(Y)
com = cbind(X, t(Y))
t(Y)
X
com = cbind(t(X), t(Y))
names(com)[1] = "condition"
manova(.~Condition, data = com)
com = as.data.frame(data)
com = as.data.frame(com)
manova(.~Condition, data = com)
manova(comb[,2:ncol(comb)]~Condition, data = com)
manova(com[,2:ncol(com)]~Condition, data = com)
manova(com[,2:ncol(com)]~com[,1])
manova(com[,c(2:ncol(com))]~com[,1])
dim(Y)
dim(X)
manova(t(Y)~t(X))
mod = manova(t(Y)~t(X))
mod
names(mod)
mod$model
summary.aov(mod)
manova(Y~X)
Y = t(Y)
X = t(X)
manova(Y~X)
Y = t(Y)
X = t(X)
manova(Y[,1:2]~X)
dim(Y)
Y = Y[,1:2]
dim(X)
Y = Y[,1:2]
Y = t(Y)
X = t(X)
manova(Y~X)
dim(Y)
Y = rmultinom(10, 10000, prob = seq(1:15))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
Y = t(Y)
Y = Y[,c(1:2)]
dim(Y)
Y = t(Y)
X = t(X)
manova(Y~X)
X=t(X)
Y = t(Y)
X = t(X)
manova(Y~X)
Y = rmultinom(10, 10000, prob = seq(1:15))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
Y = t(Y)
X = t(X)
manova(Y~X)
model <- lm(cbind(Sepal.Length, Petal.Length) ~ Species, iris2)
Manova(model, test.statistic = "Pillai")
dim(Y)
dim(X)
dim(iris)
View(iris)
mod = manova(Sepal.Length + Sepal.Width~Species, data = iris)
mod = manova(cbind(Sepal.Length, Sepal.Width) ~Species, data = iris)
mod
res.man <- manova(cbind(Sepal.Length, Petal.Length) ~ Species, data = iris)
summary(res.man)
res.man
Y = t(Y)
X = t(X)
mod = manova(Y~X)
summary(mod)
Y = t(Y)
Y = rmultinom(10, 10000, prob = seq(1:15))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
Y = t(Y)
X = t(X)
mod = manova(Y~X)
summary(mod)
mod
Y = rmultinom(100, 10000, prob = seq(1:15))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 100)
Y = t(Y)
X = t(X)
mod = manova(Y~X)
summary(mod)
summary(mod)
?manova
sepl <- iris$Sepal.Length
petl <- iris$Petal.Length
# MANOVA test
res.man <- manova(cbind(Sepal.Length, Petal.Length) ~ Species, data = iris)
summary(res.man)
sum = summary(res.man)
sum$stats
sum$stats[1,4]
sum$stats[1,3]
sum$stats[1,6]
library(fetch)
Y = rmultinom(10, 10000, prob = seq(1:15))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
Y
X
Y = rmultinom(10, 10000, prob = rep(1,100))
Y
out = fetch(Y, X, denom = "iqlr", test = "global")
out
?fetch
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
library(fetch)
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
library(fetch)
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
n_samples = 2000
denom = "all"
test = "global"
mu_vec = NULL
scale_sim = FALSE
N <- ncol(Y)
D <-  nrow(Y)
Q <- nrow(X)
if(N*D >= n_samples)
stop("You must specify more samples based on the dimension of Y (e.g. n_samples > nrow(Y)*ncol(Y).")
if (any(c(N, D, Q) <= 0))
stop("N, D, and Q must all be greater than 0 (D must be greater than 1)")
if (D <= 1)
stop("D must be greater than 1")
if(ncol(X) != ncol(Y))
stop("Mismatch between dimension of X and Y")
if(is.matrix(X) & nrow(X)>1 & denom != "all")
stop(paste0("Denom ", denom, " is only supported for a single condition!"))
fit_multDir = multDirichlet(Y, X, n_samples, denom)
if(isTRUE(scale_sim)){
if(total_model == "unif"){
if(is.null(sample.totals)){
tau <- scale_unif(N=N, alpha=alpha)
} else{
tau <- scale_unif(sample=1:length(sample.totals), alpha=alpha, w = sample.totals)
}
}
##Transform samples back
lambda.par = fit_multDir$lambda_mat
##Multiply by the totals
lambda = array(NA, dim = dim(lambda.par))
for(i in 1:n_samples){
lambda[,,i] =sweep(lambda.par[,,i], MARGIN=2, tau$tau[,i]/tau$tau[1,i], `*`)
}
} else{
lambda = fit_multDir$lambda_mat
for(i in 1:dim(lambda)[3]){
if(denom == "all"){
lambda[,,i] = driver::clr_array(lambda[,,i], 1)
} else if (denom == "iqlr"){
lambda[,,i] = iqlr(lambda[,,i], parts = 1)
} else{
stop(paste0("denom: ", denom, " not supported!"))
}
}
}
if(is.null(mu_vec)){
mu_vec = rep(0, dim(fit_multDir$lambda_mat)[1]*dim(fit_multDir$lambda_mat)[2])
}
samples = lambda
conds = X
samples_used = samples
n = dim(samples_used)[3]
p = dim(samples_used)[1] * dim(samples_used)[2]
if(hyp_global == "value"){
X_samples = apply(samples_used, MARGIN = 3, FUN = function(mat){c(mat)})
samp_mean = Rfast::rowmeans(X_samples)
X_jittered = X_samples + matrix(rnorm(nrow(X_samples)*ncol(X_samples), sd = 1e-1), nrow = nrow(X_samples))
Sigma_samp = Rfast::cova(t(X_jittered))/n
Sigma.inv = chol2inv(chol(Sigma_samp))
f_stat = ((n-p)/(p*(n-1))) *t(samp_mean - mu_vec) %*% Sigma.inv %*% (samp_mean - mu_vec)
p_val = pf(f_stat, df1 = p, df2 = n-p, lower.tail = FALSE)
return(list(f_stat = f_stat, p_val = p_val))
} else if(hyp_global == "conds"){
X_samples = apply(samples_used, MARGIN = 3, FUN = function(mat){c(mat)})
mod = manova(X_samples ~ c(conds))
mod = summary(mod)
f_stat = mod$stats[1,3]
p_val = mod$stats[1,6]
return(list(f_stat = f_stat, p_val = p_val))
} else{
return(paste("Global test ", hyp_global, " is not supported!"))
}
X_samples = apply(samples_used, MARGIN = 3, FUN = function(mat){c(mat)})
dim(X_samples)
dim(lambda)
samp_mean = Rfast::rowmeans(X_samples)
X_samples = apply(samples_used, MARGIN = 3, FUN = mean)
dim(X_samples)
length(X_samples)
X_samples = apply(samples_used, MARGIN = c(1,2), FUN = mean)
length(X_samples)
dim(X_samples)
mod = manova(X_samples ~ c(conds))
dim(conts)
dim(conds)
mod = manova(X_samples ~ t(conds))
dim(t(conds))
?manova
mod = manova(t(X_samples) ~ t(conds))
mod = summary(mod)
mod
mod = summary(mod)
mod = manova(t(X_samples) ~ t(conds), tol = 0)
mod = summary(mod)
mod = summary(mod, tol = 0)
f_stat = mod$stats[1,3]
p_val = mod$stats[1,6]
f_stat
p_val
mod
View(X_samples)
rowSums(X_samples)
colSums(X_samples)
##Drop a row
X_used = X_samples[,-nrow(X_samples)]
mod = manova(t(X_used) ~ t(conds))
mod = summary(mod)
mod
dim(X_used)
##Drop a row
X_used = X_samples[-nrow(X_samples),]
dim(X_used)
mod = manova(t(X_used) ~ t(conds))
mod = summary(mod)
##Drop a row
X_used = X_samples[-1,]
mod = manova(t(X_used) ~ t(conds))
mod = summary(mod)
dim(X_used)
mod = manova(t(X_used) ~ t(conds), tol = 1e-10)
mod = summary(mod)
mod = summary(mod, tol = 1e-10)
mod = summary(mod, tol = 0)
f_stat = mod$stats[1,3]
p_val = mod$stats[1,6]
f_stat
p_val
mod
View(Y)
dim(Y)
Y = rmultinom(10, 10000, prob = rep(1,100))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
Y
X
Y = rmultinom(10, 10000, prob = rep(1,100))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 25)
Y = rmultinom(25, 10000, prob = rep(1,100))
X = matrix(sample(1:2,25,replace=TRUE),ncol = 25)
X
table(X)
Y = rmultinom(25, 10000, prob = rep(1,100))
X = matrix(sample(1:2,25,replace=TRUE),ncol = 25)
table(X)
n_samples = 2000
denom = "all"
test = "global"
mu_vec = NULL
N <- ncol(Y)
D <-  nrow(Y)
Q <- nrow(X)
if(N*D >= n_samples)
stop("You must specify more samples based on the dimension of Y (e.g. n_samples > nrow(Y)*ncol(Y).")
if (any(c(N, D, Q) <= 0))
stop("N, D, and Q must all be greater than 0 (D must be greater than 1)")
if (D <= 1)
stop("D must be greater than 1")
if(ncol(X) != ncol(Y))
stop("Mismatch between dimension of X and Y")
if(is.matrix(X) & nrow(X)>1 & denom != "all")
stop(paste0("Denom ", denom, " is only supported for a single condition!"))
fit_multDir = multDirichlet(Y, X, n_samples, denom)
library(fetch)
fit_multDir = multDirichlet(Y, X, n_samples, denom)
if(isTRUE(scale_sim)){
if(total_model == "unif"){
if(is.null(sample.totals)){
tau <- scale_unif(N=N, alpha=alpha)
} else{
tau <- scale_unif(sample=1:length(sample.totals), alpha=alpha, w = sample.totals)
}
}
##Transform samples back
lambda.par = fit_multDir$lambda_mat
##Multiply by the totals
lambda = array(NA, dim = dim(lambda.par))
for(i in 1:n_samples){
lambda[,,i] =sweep(lambda.par[,,i], MARGIN=2, tau$tau[,i]/tau$tau[1,i], `*`)
}
} else{
lambda = fit_multDir$lambda_mat
for(i in 1:dim(lambda)[3]){
if(denom == "all"){
lambda[,,i] = driver::clr_array(lambda[,,i], 1)
} else if (denom == "iqlr"){
lambda[,,i] = iqlr(lambda[,,i], parts = 1)
} else{
stop(paste0("denom: ", denom, " not supported!"))
}
}
}
mu_vec = rep(0, dim(fit_multDir$lambda_mat)[1]*dim(fit_multDir$lambda_mat)[2])
samples = lambda
lambda = fit_multDir$lambda_mat
for(i in 1:dim(lambda)[3]){
if(denom == "all"){
lambda[,,i] = driver::clr_array(lambda[,,i], 1)
} else if (denom == "iqlr"){
lambda[,,i] = iqlr(lambda[,,i], parts = 1)
} else{
stop(paste0("denom: ", denom, " not supported!"))
}
}
samples = lambda
samples_used = samples
n = dim(samples_used)[3]
p = dim(samples_used)[1] * dim(samples_used)[2]
X_samples = apply(samples_used, MARGIN = 3, FUN = function(mat){c(mat)})
samp_mean = Rfast::rowmeans(X_samples)
X_jittered = X_samples + matrix(rnorm(nrow(X_samples)*ncol(X_samples), sd = 1e-1), nrow = nrow(X_samples))
Sigma_samp = Rfast::cova(t(X_jittered))/n
Sigma.inv = chol2inv(chol(Sigma_samp))
f_stat = ((n-p)/(p*(n-1))) *t(samp_mean - mu_vec) %*% Sigma.inv %*% (samp_mean - mu_vec)
p_val = pf(f_stat, df1 = p, df2 = n-p, lower.tail = FALSE)
return(list(f_stat = f_stat, p_val = p_val))
dim(samples_used)
X_samples = apply(samples_used, MARGIN = c(1,2), FUN = mean)
##Drop a row
X_used = X_samples[-1,]
mod = manova(t(X_used) ~ t(conds))
conds = X
mod = manova(t(X_used) ~ t(conds))
mod
mod = summary(mod, tol = 0)
f_stat = mod$stats[1,3]
p_val = mod$stats[1,6]
mod
length(unique(X)) > 2
length(unique(conds)) > 2
length(unique(conds))
X
length(unique(c(conds))) > 2
X_samples = apply(samples_used, MARGIN = c(1,2), FUN = mean)
dim(X_samples)
X_samples = apply(samples_used, MARGIN = 3, FUN = function(mat){c(mat)})
samp_mean = Rfast::rowmeans(X_samples)
dim(samp_mean)
length(samp_mean)
dim(X_samples)
library(fetch)
Y = rmultinom(10, 10000, prob = rep(1,50))
X = matrix(sample(1:2,10,replace=TRUE),ncol = 10)
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "value")
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
library(fetch)
roxygen2::roxygenise()
library(fetch)
Y
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
library(fetch)
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
library(fetch)
out = fetch(Y, X, denom = "iqlr", test = "global", hyp_global = "conds")
N <- ncol(Y)
D <-  nrow(Y)
Q <- nrow(X)
if(N*D >= n_samples)
stop("You must specify more samples based on the dimension of Y (e.g. n_samples > nrow(Y)*ncol(Y).")
if (any(c(N, D, Q) <= 0))
stop("N, D, and Q must all be greater than 0 (D must be greater than 1)")
n_samples = 2000
denom = "all"
if (D <= 1)
stop("D must be greater than 1")
if(ncol(X) != ncol(Y))
stop("Mismatch between dimension of X and Y")
if(is.matrix(X) & nrow(X)>1 & denom != "all")
stop(paste0("Denom ", denom, " is only supported for a single condition!"))
fit_multDir = multDirichlet(Y, X, n_samples, denom)
lambda = fit_multDir$lambda_mat
for(i in 1:dim(lambda)[3]){
if(denom == "all"){
lambda[,,i] = driver::clr_array(lambda[,,i], 1)
} else if (denom == "iqlr"){
lambda[,,i] = iqlr(lambda[,,i], parts = 1)
} else{
stop(paste0("denom: ", denom, " not supported!"))
}
}
mu_vec = rep(0, dim(fit_multDir$lambda_mat)[1]*dim(fit_multDir$lambda_mat)[2])
samples = lambda
conds = X
samples_used = samples
n = dim(samples_used)[3]
p = dim(samples_used)[1] * dim(samples_used)[2]
X_samples = apply(samples_used, MARGIN = c(1,2), FUN = mean)
dim(X_samples)
conds1 = unique(c(conds))[1]
cond1_samples = X_samples[conds == conds1, ]
cond2_samples = X_samples[conds != conds1, ]
dim(conds1_samples)
dim(conds1_samples)
dim(cond1_samples)
dim(cond2_samples)
###Calculating means
X_mean = Rfast::rowmeans(cond1_samples)
Y_mean = Rfast::rowmeans(cond1_samples)
X_mean
cond1_samples = X_samples[,conds == conds1]
cond2_samples = X_samples[,conds != conds1]
###Calculating means
X_mean = Rfast::rowmeans(cond1_samples)
Y_mean = Rfast::rowmeans(cond1_samples)
X_mean
Y_mean
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = 1e-1), nrow = nrow(cond1_samples))
Y_jittered = cond2_samples + matrix(rnorm(nrow(cond2_samples)*ncol(cond2_samples), sd = 1e-1), nrow = nrow(cond2_samples))
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
dim(X_jittered)
dim(Sigma_X)
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)/(nX + nY - 2)
Sigma.inv = chol2inv(chol(Sigma_samp))
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = 5e-1), nrow = nrow(cond1_samples))
Y_jittered = cond2_samples + matrix(rnorm(nrow(cond2_samples)*ncol(cond2_samples), sd = 5e-1), nrow = nrow(cond2_samples))
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)/(nX + nY - 2)
Sigma.inv = chol2inv(chol(Sigma_samp))
Sigma.inv
View(Sigma_samp)
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = 1), nrow = nrow(cond1_samples))
Y_jittered = cond2_samples + matrix(rnorm(nrow(cond2_samples)*ncol(cond2_samples), sd = 1), nrow = nrow(cond2_samples))
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)/(nX + nY - 2)
Sigma.inv = chol2inv(chol(Sigma_samp))
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)
Sigma.inv = chol2inv(chol(Sigma_samp))
X_jittered = cond1_samples
Y_jittered = cond2_samples
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)/(nX + nY - 2)
Sigma.inv = chol2inv(chol(Sigma_samp))
chol2inv(chol(Sigma_X))
chol2inv(chol(Sigma_Y))
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = 1), nrow = nrow(cond1_samples))
Y_jittered = cond2_samples + matrix(rnorm(nrow(cond2_samples)*ncol(cond2_samples), sd = 1), nrow = nrow(cond2_samples))
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = 1), nrow = nrow(cond1_samples))
chol2inv(chol(Sigma_Y))
chol2inv(chol(Sigma_X))
X_jittered
X_jittered = cond1_samples + matrix(rnorm(nrow(cond1_samples)*ncol(cond1_samples), sd = .75), nrow = nrow(cond1_samples))
Y_jittered = cond2_samples + matrix(rnorm(nrow(cond2_samples)*ncol(cond2_samples), sd = .75), nrow = nrow(cond2_samples))
nX = nrow(cond1_samples)
nY = nrow(cond2_samples)
Sigma_X = Rfast::cova(t(X_jittered))/(nX-1)
Sigma_Y = Rfast::cova(t(Y_jittered))/(nY-1)
Sigma_samp = ((nX-1) * Sigma_X + (nY-1) * Sigma_Y)/(nX + nY - 2)
Sigma.inv = chol2inv(chol(Sigma_samp))
f_stat = ((nX*nY)/(nX + nY)) *t(X_mean - Y_mean) %*% Sigma.inv %*% (X_mean - Y-mean)
Sigma.inv = Sigma_samp
f_stat = ((nX*nY)/(nX + nY)) *t(X_mean - Y_mean) %*% Sigma.inv %*% (X_mean - Y-mean)
f_stat = ((nX + nY - 1 -p)/((nX + nY - 2)*p)) * f_stat
f_stat = ((nX*nY)/(nX + nY)) *t(X_mean - Y_mean) %*% Sigma.inv %*% (X_mean - Y_mean)
f_stat
p_val = pf(f_stat, df1 = p, df2 = nX + nY - 1 -p, lower.tail = FALSE)
p_val
f_stat = ((nX*nY)/(nX + nY)) *t(X_mean - Y_mean) %*% Sigma.inv %*% (X_mean - Y_mean)
f_stat = ((nX + nY - 1 -p)/((nX + nY - 2)*p)) * f_stat
f_stat
p
nX + nY - 1 -p
nX
nY
n
p_val = pf(f_stat, df1 = p, df2 = n + n - 1 -p, lower.tail = FALSE)
p_val
library(fetch)
